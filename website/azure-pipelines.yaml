# Build and deploy static website

trigger:
  branches:
   include:
     - master
  paths:
    include:
      - website/*


variables:
  skipComponentGovernanceDetection: true
  azureSubscription: mattwhiteazuresub
  sasTokenTimeoutInMinutes: 30
  resourceGroup: blog
  frontDoorName: mattwhiteblog
  backendPoolName: blogstatic

stages:
- stage: Build
  displayName: Build website using Hugo
  variables:
    dockerVersion: 19.03.1
    containerImage: klakegg/hugo
  jobs:
  - job: containerbuild
    displayName: Build website using Docker container
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - task: DockerInstaller@0
      inputs:
        dockerVersion: $(dockerVersion)
        releaseType: stable
    - task: Docker@2
      displayName: Docker login
      inputs:
        command: login
        containerRegistry: dockerhub
    - script: |
        export HUGO_VERSION=`cat HUGO_VERSION`
        docker pull $CONTAINER_IMAGE:$HUGO_VERSION-ext
      env:
        CONTAINER_IMAGE: $(containerImage)
      displayName: Docker pull
      workingDirectory: $(Build.Repository.LocalPath)/website
    - script: |
        export HUGO_VERSION=`cat HUGO_VERSION`
        docker run --rm \
                   --interactive \
                   --user $UID:$UID \
                   --volume $PWD:/src \
                   --volume $(Build.ArtifactStagingDirectory):/target \
                   klakegg/hugo:$HUGO_VERSION-ext
      displayName: Docker run (build site)
      workingDirectory: $(Build.Repository.LocalPath)/website
    - task: PublishPipelineArtifact@1
      inputs:
        targetPath: $(Build.ArtifactStagingDirectory)
        artifact: website

- stage: Deploy
  displayName: Deploy website to Azure Storage
  dependsOn: Build
  condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))
  jobs:
  - job: westeuropecopy
    pool:
      vmImage: 'ubuntu-latest'
    variables:
    - group: westeurope
    steps:
    - checkout: none
    - task: AzurePowerShell@4
      displayName: Disable backend
      inputs:
        azureSubscription: $(azureSubscription)
        ScriptType: FilePath
        ScriptPath: scripts/set-frontdoorbackend.ps1
        ScriptArguments: -storageAccountName $(storageaccount) -resourceGroupName $(resourceGroup) -frontDoorName $(frontDoorName) -backendPoolName $(backendPoolName) -State Disabled
        FailOnStandardError: true
    - task: AzureCLI@1
      displayName: Clean storage account
      inputs:
        azureSubscription: $(azureSubscription)
        scriptLocation: scriptPath
        scriptPath: scripts/deletebatch.azcli
        failOnStandardError: true
      env:
        ACCOUNT_NAME: $(storageaccount)
    - task: DownloadPipelineArtifact@2
      inputs:
        artifactName: website
        buildType: current
        targetPath: $(Pipeline.Workspace)/website
    - task: AzureCLI@1
      displayName: Upload website files
      inputs:
        azureSubscription: $(azureSubscription)
        scriptLocation: scriptPath
        scriptPath: scripts/uploadbatch.azcli
        failOnStandardError: true
      env:
        SOURCE: $(Pipeline.Workspace)/website
        ACCOUNT_NAME: $(storageaccount)
    - task: AzurePowerShell@4
      displayName: Enable backend
      inputs:
        azureSubscription: $(azureSubscription)
        ScriptType: FilePath
        ScriptPath: scripts/set-frontdoorbackend.ps1
        ScriptArguments: -storageAccountName $(storageaccount) -resourceGroupName $(resourceGroup) -frontDoorName $(frontDoorName) -backendPoolName $(backendPoolName) -State Enabled
        FailOnStandardError: true
  - job: northeuropecopy
    dependsOn: westeuropecopy
    pool:
      vmImage: 'ubuntu-latest'
    variables:
    - group: northeurope
    steps:
    - checkout: none
    - task: AzurePowerShell@4
      displayName: Disable backend
      inputs:
        azureSubscription: $(azureSubscription)
        ScriptType: FilePath
        ScriptPath: scripts/set-frontdoorbackend.ps1
        ScriptArguments: -storageAccountName $(storageaccount) -resourceGroupName $(resourceGroup) -frontDoorName $(frontDoorName) -backendPoolName $(backendPoolName) -State Disabled
        FailOnStandardError: true
    - task: AzureCLI@1
      displayName: Clean storage account
      inputs:
        azureSubscription: $(azureSubscription)
        scriptLocation: scriptPath
        scriptPath: scripts/deletebatch.azcli
        failOnStandardError: true
      env:
        ACCOUNT_NAME: $(storageaccount)
    - task: DownloadPipelineArtifact@2
      inputs:
        artifactName: website
        buildType: current
        targetPath: $(Pipeline.Workspace)/website
    - task: AzureCLI@1
      displayName: Upload website files
      inputs:
        azureSubscription: $(azureSubscription)
        scriptLocation: scriptPath
        scriptPath: scripts/uploadbatch.azcli
        failOnStandardError: true
      env:
        SOURCE: $(Pipeline.Workspace)/website
        ACCOUNT_NAME: $(storageaccount)
    - task: AzurePowerShell@4
      displayName: Enable backend
      inputs:
        azureSubscription: $(azureSubscription)
        ScriptType: FilePath
        ScriptPath: scripts/set-frontdoorbackend.ps1
        ScriptArguments: -storageAccountName $(storageaccount) -resourceGroupName $(resourceGroup) -frontDoorName $(frontDoorName) -backendPoolName $(backendPoolName) -State Enabled
        FailOnStandardError: true