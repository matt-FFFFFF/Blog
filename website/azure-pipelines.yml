# Build and deploy static website

trigger:
  branches:
    include:
    - master
  paths:
    include:
    - website/*
    exclude:
    - website/azure-pipelines.yml
    - website/azure-pipelines-deploymentjob.yml
    - website/LICENSE
    - website/.*
    - website/docker-*


variables:
  skipComponentGovernanceDetection: true
  azureSubscription: mattwhiteazuresub
  sasTokenTimeoutInMinutes: 30
  resourceGroup: blog
  frontDoorName: mattwhiteblog
  backendPoolName: blogstatic
  vmImage: ubuntu-latest

stages:
- stage: build
  variables:
    dockerVersion: 19.03.1
    containerImage: klakegg/hugo
  jobs:
  - job: containerbuild
    displayName: Build website using Docker container
    pool:
      vmImage: $(vmImage)
    steps:
    - task: DockerInstaller@0
      inputs:
        dockerVersion: $(dockerVersion)
        releaseType: stable
    - task: Docker@2
      displayName: Docker login
      inputs:
        command: login
        containerRegistry: dockerhub
    - script: |
        export HUGO_VERSION=`cat HUGO_VERSION`
        docker pull $CONTAINER_IMAGE:$HUGO_VERSION-ext
      env:
        CONTAINER_IMAGE: $(containerImage)
      displayName: Docker pull
      workingDirectory: $(Build.Repository.LocalPath)/website
    - script: |
        export HUGO_VERSION=`cat HUGO_VERSION`
        docker run --rm \
                   --interactive \
                   --user $UID:$UID \
                   --volume $PWD:/src \
                   --volume $(Build.ArtifactStagingDirectory):/target \
                   klakegg/hugo:$HUGO_VERSION-ext
      displayName: Docker run (build site)
      workingDirectory: $(Build.Repository.LocalPath)/website
    - task: PublishPipelineArtifact@1
      inputs:
        targetPath: $(Build.ArtifactStagingDirectory)
        artifact: website

- stage: deploy
  dependsOn: build
  condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))
  jobs:
  - deployment: rolloutwesteurope
    environment: production
    variables:
      group: westeurope
    pool:
      vmImage: $(vmImage)
    strategy:
      runOnce:
        deploy:
          steps:
            - checkout: self
            - script: |
                sudo /usr/bin/pwsh -NoLogo -NoProfile -NonInteractive -ExecutionPolicy Unrestricted -File "$(Build.SourcesDirectory)/scripts/install-azmodule.ps1"
                sudo rm -rf ~/.Azure
              displayName: Install az pwsh module
            - task: AzurePowerShell@4
              displayName: Disable backend
              inputs:
                azureSubscription: $(azureSubscription)
                ScriptType: FilePath
                azurePowerShellVersion: LatestVersion
                ScriptPath: $(Build.SourcesDirectory)/scripts/setfrontdoorbackend.ps1
                ScriptArguments: -storageAccountName $(storageaccount) -resourceGroupName $(resourceGroup) -frontDoorName $(frontDoorName) -backendPoolName $(backendPoolName) -State Disabled
                FailOnStandardError: true
            - task: AzureCLI@1
              displayName: Clean storage account
              inputs:
                azureSubscription: $(azureSubscription)
                scriptLocation: scriptPath
                scriptPath: $(Build.SourcesDirectory)/scripts/deletebatch.azcli
                failOnStandardError: true
              env:
                ACCOUNT_NAME: $(storageaccount)
            - task: DownloadPipelineArtifact@2
              inputs:
                artifactName: website
                buildType: current
                targetPath: $(Pipeline.Workspace)/website
            - task: AzureCLI@1
              displayName: Upload website files
              inputs:
                azureSubscription: $(azureSubscription)
                scriptLocation: scriptPath
                scriptPath: $(Build.SourcesDirectory)/scripts/uploadbatch.azcli
              env:
                SOURCE: $(Pipeline.Workspace)/website
                ACCOUNT_NAME: $(storageaccount)
            - task: AzurePowerShell@4
              displayName: Enable backend
              inputs:
                azureSubscription: $(azureSubscription)
                ScriptType: FilePath
                azurePowerShellVersion: LatestVersion
                ScriptPath: $(Build.SourcesDirectory)/scripts/setfrontdoorbackend.ps1
                ScriptArguments: -storageAccountName $(storageaccount) -resourceGroupName $(resourceGroup) -frontDoorName $(frontDoorName) -backendPoolName $(backendPoolName) -State Enabled
                FailOnStandardError: true

  - deployment: rolloutnortheurope
    environment: production
    variables:
      group: northeurope
    pool:
      vmImage: $(vmImage)
    strategy:
      runOnce:
        deploy:
          steps:
            - checkout: self
            - script: |
                sudo /usr/bin/pwsh -NoLogo -NoProfile -NonInteractive -ExecutionPolicy Unrestricted -File "$(Build.SourcesDirectory)/scripts/install-azmodule.ps1"
                sudo rm -rf ~/.Azure
              displayName: Install az pwsh module
            - task: AzurePowerShell@4
              displayName: Disable backend
              inputs:
                azureSubscription: $(azureSubscription)
                ScriptType: FilePath
                azurePowerShellVersion: LatestVersion
                ScriptPath: $(Build.SourcesDirectory)/scripts/setfrontdoorbackend.ps1
                ScriptArguments: -storageAccountName $(storageaccount) -resourceGroupName $(resourceGroup) -frontDoorName $(frontDoorName) -backendPoolName $(backendPoolName) -State Disabled
                FailOnStandardError: true
            - task: AzureCLI@1
              displayName: Clean storage account
              inputs:
                azureSubscription: $(azureSubscription)
                scriptLocation: scriptPath
                scriptPath: $(Build.SourcesDirectory)/scripts/deletebatch.azcli
                failOnStandardError: true
              env:
                ACCOUNT_NAME: $(storageaccount)
            - task: DownloadPipelineArtifact@2
              inputs:
                artifactName: website
                buildType: current
                targetPath: $(Pipeline.Workspace)/website
            - task: AzureCLI@1
              displayName: Upload website files
              inputs:
                azureSubscription: $(azureSubscription)
                scriptLocation: scriptPath
                scriptPath: $(Build.SourcesDirectory)/scripts/uploadbatch.azcli
              env:
                SOURCE: $(Pipeline.Workspace)/website
                ACCOUNT_NAME: $(storageaccount)
            - task: AzurePowerShell@4
              displayName: Enable backend
              inputs:
                azureSubscription: $(azureSubscription)
                ScriptType: FilePath
                azurePowerShellVersion: LatestVersion
                ScriptPath: $(Build.SourcesDirectory)/scripts/setfrontdoorbackend.ps1
                ScriptArguments: -storageAccountName $(storageaccount) -resourceGroupName $(resourceGroup) -frontDoorName $(frontDoorName) -backendPoolName $(backendPoolName) -State Enabled
                FailOnStandardError: true

- stage: finalise
  dependsOn: deploy
  condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))
  jobs:  
  - job: purgecache
    pool:
      vmImage: $(vmImage)
    steps:
    - task: AzureCLI@1
      displayName: Purge cache
      inputs:
        azureSubscription: $(azureSubscription)
        inlineScript: |
          az extension add --name front-door
          az network front-door purge-endpoint --resource-group $(resourceGroup) --name $(frontDoorName) --content-paths "/*" 
        scriptLocation: inlineScript
        failOnStandardError: true