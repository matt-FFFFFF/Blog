# Issue certificates

trigger: none

schedules:
  - cron: "0 0 * * *"
    displayName: Daily certificate issue or renew
    always: true
    branches:
      include:
        - master

variables:
  skipComponentGovernanceDetection: true
  azureSubscription: mattwhiteazuresub
  letsEncryptEnvironment: LE_PROD

stages:
- stage: Certificate
  displayName: Certificate
  jobs:
  - job: 
    displayName: Issue or renew certificate
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - task: AzureCLI@1
      displayName: az cli generate token
      inputs:
        scriptLocation: inlineScript
        inlineScript: "echo '##vso[task.setvariable variable=azureToken;issecret=true]'`az account get-access-token --resource 'https://management.core.windows.net/' --query accessToken --output tsv`"
        azureSubscription: $(azureSubscription)
        failOnStandardError: true
    - task: PowerShell@2
      displayName: Install Posh-ACME
      inputs:
        targetType: inline
        script: Install-Module Posh-ACME -Force -Verbose -Scope CurrentUser
        failOnStderr: true
    - script: mkdir Posh-ACME
      workingDirectory: $(Agent.TempDirectory)
      displayName: Make temp directory
    - task: PowerShell@2
      displayName: Posh-ACME
      inputs:
        targetType: filePath
        filePath: certbot/issuecert.ps1
        failOnStderr: true
        workingDirectory: $(System.DefaultWorkingDirectory)/certbot
      env:
        POSHACME_HOME: $(Agent.TempDirectory)/Posh-ACME
        AZURE_TOKEN: $(azureToken)
        LE_ENV: $(letsEncryptEnvironment)
        AZURE_SUBSCRIPTION_ID: $(azureSubscriptionId)
    - task: CmdLine@2
      displayName: OpenSSL generate PFX
      inputs:
        workingDirectory: $(Agent.TempDirectory)/Posh-ACME
        failOnStderr: true
        script: |
          cd `cat current-server.txt| cut -d'/' -f 3`
          cd `cat current-account.txt`
          cd `cat current-order.txt`
          openssl pkcs12 -export -keypbe NONE -certpbe NONE -inkey cert.key -in cert.cer -certfile chain.cer -out $AGENT_TEMP/cert-nopasswd.pfx -passout pass:
      env:
        AGENT_TEMP: $(Agent.TempDirectory)
    - task: AzureCLI@1
      displayName: Store certificate in Key Vault
      inputs:
        azureSubscription: $(azureSubscription)
        scriptLocation: inlineScript
        inlineScript: |
          az keyvault certificate import --vault-name $(keyVaultName) \
                                        --name mattwhiteblog \
                                        --file $(Agent.TempDirectory)/cert-nopasswd.pfx
        
        