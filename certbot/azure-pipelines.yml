# Issue certificates

trigger: none

schedules:
  - cron: "0 0 * * *"
    displayName: Daily certificate issue or renew
    always: true
    branches:
      include:
        - master

variables:
  skipComponentGovernanceDetection: true
  azureSubscription: mattwhiteazuresub
  letsEncryptEnvironment: LE_STAGE
  symmetricKeyName: leconfigsecretwrapped
  blobcontainer: configprod

stages:
- stage: build
  displayName: Certificate
  jobs:
  - job: cert
    displayName: Issue or renew certificate
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - task: AzureKeyVault@1
      displayName: Get secret
      inputs:
        azureSubscription: $(azureSubscription)
        KeyVaultName: $(keyvaultName)
        SecretsFilter: $(symmetricKeyName)

    - task: AzureCLI@1
      displayName: az cli generate vault token
      inputs:
        scriptLocation: inlineScript
        inlineScript: "echo '##vso[task.setvariable variable=vaultToken;issecret=true]'`az account get-access-token --resource 'https://vault.azure.net' --query accessToken --output tsv`"
        azureSubscription: $(azureSubscription)
        failOnStandardError: true

    - script: |
        jq -n --arg data "$(leconfigsecretwrapped)" '. += { alg: "RSA-OAEP" } | .value += $data' > req.json
        HEADER="Authorization: Bearer $(vaultToken)"
        URL="https://$(keyvaultName).vault.azure.net/keys/$(asymmetricKeyName)/$(asymmetricKeyVersion)/unwrapkey?api-version=7.0"
        SYMKEY=`curl --silent --header "$HEADER" --header "Content-Type: application/json" --data "@req.json" -X POST $URL | jq -r .value`
        rm -f req.json
        echo "Sym key hash `echo $SYMKEY | sha256sum`"
        echo "##vso[task.setvariable variable=symmetricKey;issecret=true]$SYMKEY"
      displayName: Unwrap key
      failOnStderr: true
      env:
        ASYMMETRICKEYNAME: $(asymmetricKeyName)
        ASYMMETRICKEYVERSION: $(asymmetricKeyVersion)
        KEYVAULTNAME: $(keyvaultName)
        SYMMETRICKEYNAME: $(symmetricKeyName)
        LECONFIGSECRETWRAPPED: $(leconfigsecretwrapped)

    - task: AzureCLI@1
      displayName: Download & extract config
      inputs:
        scriptLocation: inlineScript
        inlineScript: |
          EXISTS=`az storage blob exists --name acme.tar.gz.gpg --container $(blobcontainer) --account-name $(leconfigstorageaccount) --query exists --output tsv`
          if [ "$EXISTS" == "false" ]; then
            echo "WARNING: ACME config backup not found. Creating..."
            echo "##vso[task.setvariable variable=letsencryptoperation]newcert"
            mkdir -v Posh-ACME
            exit 0
          fi
          az storage blob download --account-name $(leconfigstorageaccount) --container $(blobcontainer) --name acme.tar.gz.gpg --file acme.tar.gz.gpg
          gpg --passphrase $PASSPHRASE --decrypt acme.tar.gz.gpg >acme.tar.gz
          tar xvzf acme.tar.gz
          rm -v acme.tar.gz acme.tar.gz.gpg
          echo "##vso[task.setvariable variable=letsencryptoperation]renew"
        azureSubscription: $(AzureSubscription)
        workingDirectory: $(Agent.TempDirectory)
      env:
        PASSPHRASE: $(symmetricKey)

    - task: PowerShell@2
      displayName: Install Posh-ACME
      inputs:
        targetType: inline
        script: Install-Module Posh-ACME -Force -Verbose -Scope CurrentUser
        failOnStderr: true

    - task: AzureCLI@1
      displayName: az cli generate azure token
      inputs:
        scriptLocation: inlineScript
        inlineScript: "echo '##vso[task.setvariable variable=azureToken;issecret=true]'`az account get-access-token --query accessToken --output tsv`"
        azureSubscription: $(azureSubscription)
        failOnStandardError: true

    - task: PowerShell@2
      displayName: Let's Encrypt Generate or Renew
      inputs:
        targetType: filePath
        filePath: certbot/issuecert.ps1
        arguments: -Domain mattwhite.blog
        failOnStderr: true
        workingDirectory: $(System.DefaultWorkingDirectory)/certbot
      env:
        POSHACME_HOME: $(Agent.TempDirectory)/Posh-ACME
        AZURE_TOKEN: $(azureToken)
        LE_ENV: $(letsEncryptEnvironment)
        LE_OPERATION: $(letsEncryptOperation)
        AZURE_SUBSCRIPTION_ID: $(azureSubscriptionId)

    - task: CmdLine@2
      displayName: OpenSSL generate PFX
      inputs:
        workingDirectory: $(Agent.TempDirectory)/Posh-ACME
        failOnStderr: true
        script: |
          cd `cat current-server.txt | cut -d'/' -f 3`
          cd `cat current-account.txt`
          cd `cat current-order.txt`
          openssl pkcs12 -export -keypbe NONE -certpbe NONE -inkey cert.key -in cert.cer -certfile chain.cer -out $AGENT_TEMP/cert-nopasswd.pfx -passout pass:
      env:
        AGENT_TEMP: $(Agent.TempDirectory)

    - task: AzureCLI@1
      name: certstorekv
      displayName: Store certificate in Key Vault
      inputs:
        azureSubscription: $(azureSubscription)
        scriptLocation: inlineScript
        inlineScript: |
          cd `cat current-server.txt | cut -d'/' -f 3`
          cd `cat current-account.txt`
          cd `cat current-order.txt`

          KVTHUMB=`az keyvault certificate show --vault-name $(keyVaultName) --name mattwhiteblog --query x509ThumbprintHex --output tsv`
          LOCALTHUMB=`openssl x509 -noout -fingerprint -sha1 -in fullchain.cer | cut -d\= -f2 | sed s/://g`
          
          echo "Key Vault Certificate Thumb: $KVTHUMB"
          echo "Local Certificate Thumb:     $LOCALTHUMB"

          if [ "$KVTHUMB" == "$LOCALTHUMB" ]; then
            echo "Certificate not different - will not import to Key Vault"
            exit 0
          fi

          CERT=`az keyvault certificate import --vault-name $(keyVaultName) \
                                        --name mattwhiteblog \
                                        --file $(Agent.TempDirectory)/cert-nopasswd.pfx`
          
          CERTID=`echo $CERT | jq -r .id | cut -d/ -f6`
          
          echo "Certificate updated"
          echo "##vso[task.setvariable variable=certificateVersion;isSecret=true]$CERTID"
        workingDirectory: $(Agent.TempDirectory)/Posh-ACME

    - task: AzureCLI@1
      displayName: Compress & store config
      inputs:
        scriptLocation: inlineScript
        inlineScript: |
          tar cvzf acme.tar.gz Posh-ACME
          gpg --passphrase $PASSPHRASE --symmetric acme.tar.gz
          rm -fr acme.tar.gz Posh-ACME
          az storage blob upload --account-name $(leconfigstorageaccount) --container $(blobcontainer) --name acme.tar.gz.gpg --file acme.tar.gz.gpg --validate-content
        azureSubscription: $(AzureSubscription)
        workingDirectory: $(Agent.TempDirectory)
      env:
        PASSPHRASE: $(symmetricKey)
    
    # TODO: Store certificate ID as artifact and move this to deploy stage
    - task: AzurePowerShell@4
      condition: and(succeeded(), eq(variables['letsEncryptEnvironment'], 'LE_PROD'), not(eq(variables['certificateVersion'],'')))
      displayName: Enable-AzFrontDoorCustomHttps
      inputs:
        azurePowerShellVersion: LatestVersion
        azureSubscription: $(azureSubscription)
        ScriptType: InlineScript
        Inline: |
          $vaultId = (Get-AzKeyVault -VaultName $(keyVaultName)).ResourceId
          Enable-AzFrontDoorCustomHttps -ResourceGroupName blog -FrontDoorName mattwhiteblog -VaultId $vaultId -SecretName mattwhiteblog -SecretVersion $(certificateVersion)
